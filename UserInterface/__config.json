{
    // this configuration file works by first loading all top-level
    // configuration items and then will load the specified environment
    // on top, this provides a layering affect. environment names can be
    // anything, and just require definition in this file. There's
    // two predefined environments, 'backtesting' and 'live', feel free
    // to add more!

    "environment": "teb-algo",

    // algorithm class selector
    "algorithm-type-name": "TEBBasicAlgo1",

    // Algorithm language selector - options CSharp, FSharp, VisualBasic, Python, Java
    "algorithm-language": "CSharp",

    //Physical DLL location
    "algorithm-location": "QuantConnect.Algorithm.CSharp.dll",
    //"algorithm-location": "QuantConnect.Algorithm.Python.dll",
    //"algorithm-location": "QuantConnect.Algorithm.FSharp.dll",
    //"algorithm-location": "QuantConnect.Algorithm.VisualBasic.dll",
    //"algorithm-location": "QuantConnect.Algorithm.Java.dll",

    // engine
    "data-folder": "../../../Data/",


    // ironpython-location
    "ironpython-location": "../ironpython/Lib",


    // handlers
    "log-handler": "QuantConnect.Logging.CompositeLogHandler",
    "messaging-handler": "QuantConnect.Messaging.Messaging",
    "job-queue-handler": "QuantConnect.Queues.JobQueue",
    "api-handler": "QuantConnect.Api.Api",
    "command-queue-handler": "QuantConnect.Queues.EmptyCommandQueueHandler",
    // this command queue will check a file to read json serialized commands (use TypeNameHandling.All)
    //"command-queue-handler": "QuantConnect.Queues.FileCommandQueueHandler",
    // used by the FileComandQueueHandler, serialize a ICommand and it will be run against algorithm
    "command-json-file": "command.json",
    "map-file-provider": "QuantConnect.Data.Auxiliary.LocalDiskMapFileProvider",
    "factor-file-provider": "QuantConnect.Data.Auxiliary.LocalDiskFactorFileProvider",

    // if one uses "true" as string in following token, market hours
    // will remain open all hours and all days.
    // Any other string beside "true" will make lean operate
    // only during regular market hours.
    "force-exchange-always-open": "false",

    // interactive brokers configuration
    "ib-account": "DUxxxx",
    "ib-user-name": "",
    "ib-password": "",
    "ib-host": "127.0.0.1",
    "ib-port": "4001",
    "ib-agent-description": "Individual",
    "ib-use-tws": "false",
    "ib-tws-dir": "C:\\Jts",
    "ib-controller-dir": "C:\\IBController",

    // tradier configuration
    "qc-user-id": "",
    "tradier-account-id": "",
    "tradier-access-token": "",
    "tradier-refresh-token": "",
    "tradier-issued-at": "",
    "trader-lifespan": "",


    // teb configuration
    "qc-user-id": "",
    "TEB-account-id": "22208",
    "TEB-connection-string": "data source=xxDatasource;initial catalog=xxdb;user id=xxUser;password=xxPass;MultipleActiveResultSets=True;Asynchronous Processing=true;Application Name=NotificationDataApp;Max Pool Size=1024;Pooling=true;",
    "TEB-fix-app-name": "FIXHOSTCASHCLIENT",
    "TEB-sender-sub-id": "accountsubid",

    // oanda configuration
    "oanda-environment": "Practice",
    "oanda-access-token": "",
    "oanda-account-id": "",

    // fxcm configuration
    "fxcm-server": "",
    "fxcm-terminal": "",
    "fxcm-user-name": "",
    "fxcm-password": "",
    "fxcm-account-id": "",

    // parameters to set in the algorithm (the below are just samples)
    "parameters": {
        "ema-fast": 10,
        "ema-slow": 20
    },

    "environments": {

        // defines the 'backtesting' environment
        "backtesting": {
            "live-mode": false,

            "setup-handler": "QuantConnect.Lean.Engine.Setup.ConsoleSetupHandler",
            "result-handler": "QuantConnect.Lean.Engine.Results.BacktestingResultHandler",
            "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.FileSystemDataFeed",
            "real-time-handler": "QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler",
            "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler"
        },

        "desktop": {
            "live-mode": false,

            "setup-handler": "QuantConnect.Lean.Engine.Setup.ConsoleSetupHandler",
            "result-handler": "QuantConnect.Lean.Engine.Results.DesktopResultHandler",
            "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.FileSystemDataFeed",
            "real-time-handler": "QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler",
            "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler"
        },

        // defines the 'live-interactive' environment
        "live-interactive": {
            "live-mode": true,

            // real brokerage implementations require the BrokerageTransactionHandler
            "live-mode-brokerage": "InteractiveBrokersBrokerage",

            "setup-handler": "QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler",
            "result-handler": "QuantConnect.Lean.Engine.Results.LiveTradingResultHandler",
            "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.LiveTradingDataFeed",
            "data-queue-handler": "QuantConnect.Lean.Engine.DataFeeds.Queues.LiveDataQueue",
            "real-time-handler": "QuantConnect.Lean.Engine.RealTime.LiveTradingRealTimeHandler",
            "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler"
        },


        "teb-algo": {
            "live-mode": false,

            "live-mode-brokerage": "TEBBrokerage",

            "setup-handler": "QuantConnect.Lean.Engine.Setup.ConsoleSetupHandler",
            "result-handler": "QuantConnect.Lean.Engine.Results.DesktopResultHandler",
            "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.FileSystemDataFeed",
            "real-time-handler": "QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler",
            "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler"
        },

        // defines the 'live-paper' environment
        "live-paper": {
            "live-mode": "true",

            // the paper brokerage requires the BacktestingTransactionHandler
            "live-mode-brokerage": "PaperBrokerage",

            "setup-handler": "QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler",
            "result-handler": "QuantConnect.Lean.Engine.Results.LiveTradingResultHandler",
            "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.LiveTradingDataFeed",
            "data-queue-handler": "QuantConnect.Lean.Engine.DataFeeds.Queues.LiveDataQueue",
            "real-time-handler": "QuantConnect.Lean.Engine.RealTime.LiveTradingRealTimeHandler",
            "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler"
        },

        // defines the 'live-tradier' environment
        "live-tradier": {
            "live-mode": true,

            // this setting will save tradier access/refresh tokens to a tradier-tokens.txt file
            // that can be read in next time, this makes it easier to start/stop a tradier algorithm
            "tradier-save-tokens": true,

            // real brokerage implementations require the BrokerageTransactionHandler
            "live-mode-brokerage": "TradierBrokerage",

            "setup-handler": "QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler",
            "result-handler": "QuantConnect.Lean.Engine.Results.LiveTradingResultHandler",
            "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.LiveTradingDataFeed",
            "data-queue-handler": "QuantConnect.Lean.Engine.DataFeeds.Queues.LiveDataQueue",
            "real-time-handler": "QuantConnect.Lean.Engine.RealTime.LiveTradingRealTimeHandler",
            "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler"
        }
    }
}
